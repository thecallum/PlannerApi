service: planner-api

provider:
  name: aws
  runtime: dotnet6
  memorySize: 2048
  timeout: 15
  region: eu-west-2

package:
  artifact: ./bin/release/net6.0/planner-api.zip

functions:
  PlannerApi:
    name: PlannerApi
    handler: PlannerApi::PlannerApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Host=${ssm:/planner-api/production/postgres-hostname};Port=${ssm:/planner-api/production/postgres-port};Database=${ssm:/planner-api/production/postgres-database};Username=${ssm:/planner-api/production/postgres-username};Password=${ssm:/planner-api/production/postgres-password}
    events:
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            name: CognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: arn:aws:cognito-idp:eu-west-2:714664911966:userpool/eu-west-2_IDJRwWoOA
          cors:
            origin: '*' # need to update
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /planner-api/production/
        RoleName: planner-api-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: 'Allow'
                  Action:
                    - 's3:PutObject'
                    - 's3:GetObject'
                  Resource:
                    Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - 'Ref': 'ServerlessDeploymentBucket'
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'lambda:InvokeFunction'
                  Resource: '*'