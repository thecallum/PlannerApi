# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@2.4
  # aws-cli: circleci/aws-cli@3.1
  # serverless-framework: circleci/serverless-framework@2.0.0

executors:
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0
  docker-python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root "~"
  attach_workspace:
    &attach_workspace
    attach_workspace:
      at: *workspace_root

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    machine: true 
    steps:
      - checkout
      - run:
          working_directory: ~/project/PlannerApi
          name: Build
          command: |
            docker-compose build test
      - run:
          working_directory: ~/project/PlannerApi
          name: Run tests
          command: |
            docker-compose run test

  migrate-database:
    description: "Migrate database"
    executor: docker-dotnet
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install SSH client
          command: apt-get update && apt-get install -y openssh-client
      - run:
          name: Install Unzip
          command: apt-get update && apt-get install unzip
      - run:
          name: Install AWS CLI
          command: |
            curl -L -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Install Session Manager plugin
          command: |
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            dpkg -i session-manager-plugin.deb
      - run:
          name: Install dotnet ef core
          command: dotnet tool install dotnet-ef --version 6.0.6 --tool-path ./dotnet-ef-local/
      - run:
          name: SSH into RDS and migrate database
          command: |
            aws --region=eu-west-2 ssm get-parameter --name "/planner-api/production/ssh-pem" --output text --query Parameter.Value > ./private-key.pem
            chmod 400 ./private-key.pem
            HOST=`aws --region=eu-west-2  ssm get-parameter --name /planner-api/production/postgres-hostname --query Parameter.Value --output text`
            PORT=`aws --region=eu-west-2  ssm get-parameter --name /planner-api/production/postgres-port --query Parameter.Value --output text`
            INSTANCE_NAME=`aws --region=eu-west-2  ssm get-parameter --name /planner-api/production/sshbox --query Parameter.Value --output text`
            ssh -4 -i ./private-key.pem ec2-user@${INSTANCE_NAME} -L 6000:${HOST}:${PORT} -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ServerAliveInterval=0 -fN
            PASSWORD=`aws --region=eu-west-2 ssm get-parameter --name /planner-api/production/postgres-password --query Parameter.Value --output text`
            USERNAME=`aws --region=eu-west-2 ssm get-parameter --name /planner-api/production/postgres-username --query Parameter.Value --output text`
            DATABASE=`aws --region=eu-west-2 ssm get-parameter --name /planner-api/production/postgres-database --query Parameter.Value --output text`
            CONN_STR="Host=localhost;Password=${PASSWORD};Port=6000;Username=${USERNAME};Database=${DATABASE}"            
            cd ./PlannerApi/
            CONNECTION_STRING=${CONN_STR} ./../dotnet-ef-local/dotnet-ef database update -c PlannerApi.Infrastructure.PlannerContext

  deploy-to-production:
    executor: docker-dotnet
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless
      - run:
          name: Build lambda
          command: |
            cd ./PlannerApi/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd ./PlannerApi/
            sls deploy --stage production --conceal

workflows:
  test-and-deploy:
    jobs: 
        - build-and-test
        - migrate-database
            requires:
              - build-and-test
            filters:
              only: main
        - deploy-to-production:
            requires:
              - migrate-database
            filters:
              branches:
                only: main

